
############################
## load the config

## Use the environment and the tools set in the top-level
## SConstruct file (set with 'Export') - this is very important

Import( '*' )
myenv=env.Copy()

#############################
## the programs to build

# we put the stuff that could fail due to bad xine.h locations, etc. at the beginning
# so if the build fails the user knows quickly
app_sources = Split("""
	xineEngine.cpp
	xineConfig.cpp
	xineScope.c
	theStream.cpp
	videoWindow.cpp
	videoSettings.cpp
	captureFrame.cpp

        actions.cpp
        stateChange.cpp
	slider.cpp
	analyzer.cpp
	playDialog.cpp
	listView.cpp
	adjustSizeButton.cpp
	fullScreenAction.cpp
	insertAspectRatioMenuItems.cpp
	playlistFile.cpp
	volumeAction.cpp

        ../mxcl.library.cpp

        main.cpp
        mainWindow.cpp""")

KDEprogram( "codeine", app_sources, myenv )


############################
## Customization

## Additional include paths for compiling the source files
## Always add '../' (top-level directory) because moc makes code that needs it
KDEaddpaths( ['./', '../', '../../'], myenv )

## Necessary libraries to link against
KDEaddlibs( ['qt-mt', 'kio', 'kdecore', 'kdeui', 'xine', 'Xtst'], myenv )

## This shows how to add other link flags to the program
myenv['LINKFLAGS'].append('-L/usr/X11R6/lib')

## If you are using QThread, add this line
# myenv.AppendUnique( CPPFLAGS = ['-DQT_THREAD_SUPPORT'] )
